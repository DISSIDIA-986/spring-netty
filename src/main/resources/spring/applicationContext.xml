<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"

	default-autowire="byName">
	<context:annotation-config />
	
	<!-- 扫描注解的类 -->
	<context:component-scan base-package="com.dissidia986.*, org.nerdronix.*" />
	<!--开启这个配置，spring才能识别@Scheduled注解 -->
	<task:annotation-driven scheduler="qbScheduler" mode="proxy" />
	<task:scheduler id="qbScheduler" pool-size="10" />
	<context:property-placeholder location="classpath:netty-server.properties" />
	<!-- 数据源 BoneCP 连接池 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://192.168.1.100/yourdb" />
		<property name="username" value="user" />
		<property name="password" value="pasword" />
		<property name="idleConnectionTestPeriodInMinutes" value="15" /><!--检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleMaxAgeInMinutes" value="15" /><!--连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="maxConnectionsPerPartition" value="10" /><!--每个分区最大的连接数 -->
		<property name="minConnectionsPerPartition" value="1" /><!--每个分区最小的连接数 -->
		<property name="partitionCount" value="1" /><!--分区数，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="acquireIncrement" value="2" /><!-- 当连接池中的连接耗尽的时候一次同时获取的连接数。Default: 1 -->
		<property name="statementsCacheSize" value="10" /><!--缓存prepared statements的大小，默认值：0 -->
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:sql-map-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="batchSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:batch-sql-map-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<bean id="batchSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="batchSqlSessionFactory" />
	</bean>

	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="256" />
	</bean>
	<!-- 配置拦截器 -->
	<bean id="dataSourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txadvice" transaction-manager="dataSourceTransactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="increase*" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="*" read-only="true" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 不配置Transactional注解不起作用 -->
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager" />

	<aop:config>
		<aop:pointcut expression="execution(* com.*.*.service.*.*(..))"
			id="allmethod"></aop:pointcut>
		<aop:advisor advice-ref="txadvice" pointcut-ref="allmethod"></aop:advisor>
	</aop:config>

	<!-- 配置路径,可以省去前缀和后缀 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Spring MVC 的配置 -->
	<!-- 专门处理静态文件 -->
	<mvc:default-servlet-handler />
	<!-- 让它读取controller里面的配置文件 -->
	<mvc:annotation-driven />

	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="10000000" />
	</bean>
	<!-- 配置拦截器 -->
	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/back/**"/> 
		<ref bean="authInterceptor"/> </mvc:interceptor> </mvc:interceptors> -->

	<!-- Spring发送邮件的配置 -->
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="resourceLoaderPath" value="/WEB-INF/classes/velocity/" />
	</bean>
	<!-- netty配置 -->
	<bean id="bossGroup" class="io.netty.channel.nio.NioEventLoopGroup">
		<constructor-arg type="int" index="0"
			value="${boss.thread.count}" />
		<constructor-arg index="1" ref="bossThreadFactory" />
	</bean>

	<bean id="workerGroup" class="io.netty.channel.nio.NioEventLoopGroup">
		<constructor-arg type="int" index="0"
			value="${worker.thread.count}" />
		<constructor-arg index="1" ref="workerThreadFactory" />
	</bean>

	<bean id="bossThreadFactory" class="org.nerdronix.NamedThreadFactory">
		<constructor-arg type="String" value="Server-Boss" />
	</bean>

	<bean id="workerThreadFactory" class="org.nerdronix.NamedThreadFactory">
		<constructor-arg type="String" index="0" value="Server-Worker" />
	</bean>


	<!-- Netty options for server bootstrap -->
	<util:map id="tcpChannelOptions" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant static-field="io.netty.channel.ChannelOption.SO_KEEPALIVE" />
			</key>
			<value type="java.lang.Boolean">${so.keepalive}</value>
		</entry>
		<entry>
			<key>
				<util:constant static-field="io.netty.channel.ChannelOption.SO_BACKLOG" />
			</key>
			<value type="java.lang.Integer">${so.backlog}</value>
		</entry>
	</util:map>	 	
</beans>